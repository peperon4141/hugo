<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>こつこつナレッジ</title><link>https://tech.choihack.com/post/</link><description>Recent content on こつこつナレッジ</description><generator>Hugo -- gohugo.io</generator><copyright>© - 2021 - こつこつナレッジ</copyright><lastBuildDate>Sun, 11 Jul 2021 23:23:10 +0900</lastBuildDate><atom:link href="https://tech.choihack.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Cookieのパラメータ整理</title><link>https://tech.choihack.com/post/%E6%8A%80%E8%A1%93%E9%9B%91%E8%A8%98/cookie%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E6%95%B4%E7%90%86/</link><pubDate>Thu, 05 Aug 2021 10:54:47 +0900</pubDate><guid>https://tech.choihack.com/post/%E6%8A%80%E8%A1%93%E9%9B%91%E8%A8%98/cookie%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E6%95%B4%E7%90%86/</guid><description>はじめに Cookieの設定をする時に、意外と色々パラメータがあります。
何度も調べては忘れるので、ここでわかりやすくまとめて調べるのは最後にしたいと思います。
パラメータの種類 GoogleChromeのDeveloperToolで調べると、以下のパラメータがあります。
Name Value Domain Path Expires/Max-Age Size HttpOnly Secure SameSite Sameparty Priority これらを対象にそれぞれのパラメータの意味と、設定される値について見ていきます。 Name/Value 早速説明を省きます。
Cookie名とCookieの値です。
Expires/Max-Age Cookieの有効期限です。
指定しない場合は、セッション終了までです。
Max-Ageの単位は秒です。
Domain どのホストの場合にCookieを送信するかを指定します。
デフォルトはCookieを保存したページのホストと同じページにアクセスした場合だけCookieを送信します。
例えば、example.com/page.htmlにアクセスした時に保存されたCookieは、同じくexample.com のホストのページにアクセスした場合に送信されます。
この時、サブドメインへアクセスしてもCookieは送信されません。
あえてDomainを指定し場合は、サブドメインを含めてCookieを送信できます。
Domainの設定は以下のように行います。
document.cookie = 'A=B; Domain=example.com'; Path PathはどのパスでCookieを送信するかを許可します。
Secure Httpsの通信でのみ使用できる。
document.cookie = 'A=B; Secure'; HttpOnly JavaScriptで生成されたCookieはこのフラグを含むことができない フラグを含む場合は、JavaScriptで取得もできない document.cookie = 'A=B; HttpOnly'; HttpとかHttpsとかに関連するCookieかと思うような名前ですが、Httpリクエスト経由でしか使用できないという意味のようですね。
SameSite 別サイトに遷移する時に、遷移先サイトのCookieを送信するかどうかを設定できます。
設定可能な値は、以下のStrict、Lax、Noneの3つです。
遷移元をAサイト、遷移先をBサイトとしましょう。
AサイトからBサイトへ遷移する時、BサイトのCookieが送信されるか設定によって以下のようになります。
Strict：BサイトのCookieを送信しない Lax：GETやHEADなど、安全なメソッドの場合だけ送信する None：制限なくBサイトのCookieを送信する Chromeでは、SameSiteが設定されていない場合は、Lax扱いになります。
また、Noneを指定する場合は、同時にSecrue属性が必須です。
つまり、制限なく別サイトにCookieを送信するには、HTTPS通信でないといけないということになります。
参考 Cookieで指定可能な属性の種類と設定方法</description></item><item><title>Git submoduleを理解する</title><link>https://tech.choihack.com/post/git_submodule%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B/</link><pubDate>Tue, 20 Jul 2021 07:32:10 +0900</pubDate><guid>https://tech.choihack.com/post/git_submodule%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B/</guid><description>はじめに Git submoduleとは外部のGitリポジトリを、自分のリポジトリのサブディレクトリとして登録する仕組みです。
コマンドの使い方 頻出するコマンドをまとめます。
今回はサンプルとして、MainroadというHugoのテーマを使います。
ローカルワークスペースのthemes/mainroadディレクトリ以下に追加していきます。
追加 git submodule add &amp;lt;リポジトリのURL&amp;gt; &amp;lt;ローカルのサブディレクトリ&amp;gt;
git submodule add https://github.com/Vimux/Mainroad.git themes/mainroad themes/mainroad以下にmainroadがクローンされます。
更新 git submodule update
削除 git submodule deinit -f &amp;lt;サブモジュール&amp;gt;: submoduleを削除
git rm -f &amp;lt;サブモジュール&amp;gt;: gitの管理から削除
rm -rf .git/modules/&amp;lt;サブモジュール&amp;gt;: .gitからgit情報を削除
git submodule deinit themes/mainroad git rm -f themes/mainroad rm -rf .git/modules/themes/mainroad submoduleを追加したときに起こっていること submoduleを理解するために、どんなことが起こっているのかを整理しておきましょう。
追加されたファイルを確認 $ git status On branch master Changes to be committed: (use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage) new file: .</description></item></channel></rss>