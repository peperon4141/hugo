<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>こつこつナレッジ</title><link>https://tech.choihack.com/</link><description>Recent content on こつこつナレッジ</description><generator>Hugo -- gohugo.io</generator><copyright>© - 2021 - こつこつナレッジ</copyright><lastBuildDate>Sun, 11 Jul 2021 23:23:10 +0900</lastBuildDate><atom:link href="https://tech.choihack.com/index.xml" rel="self" type="application/rss+xml"/><item><title>viewportを理解する</title><link>https://tech.choihack.com/post/others/viewport%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B/</link><pubDate>Tue, 10 Aug 2021 21:44:00 +0900</pubDate><guid>https://tech.choihack.com/post/others/viewport%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B/</guid><description>はじめに HTMLのviewportの理解が曖昧で、コピペでやり過ごしていました。
viewportは例えば以下のようなものです。
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; この記事では、viewportの意味を解き明かして行きたいと思います。
まずは基本 viewportは表示領域のこと &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=480&amp;quot;&amp;gt; とすると、幅480pxとして仮想的なモニターができるイメージ document.documentElement.clientWidth も480pxになるように計算される mediaクエリも480pxとして判定される ブラウザはこの仮想的なモニターをブラウザサイズに幅が合うように表示する &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width&amp;quot;&amp;gt; と指定した場合はブラウザの幅が使用される 解像度は考慮されない 設定できる値の説明 width 表示領域の幅を指定できる。
width=device-widthで実際のデバイスの幅と一致させられる。
initial-scale 初期のズーム倍率。
minimum-scale～maximum-scaleを指定することで、ズーム範囲を指定できる。
minimum-scale: 0～10 の範囲、初期値は 0.25 maximum-scale: 0～10 の範囲、初期値は 1.6 user-scalable ズームの操作を許可するか、しないかを指定する。 注意したいところ モバイル端末で有効。ブラウザへのアドバイスとして使用される 指定しないと「ウィンドウ幅によってページコンテンツが隠されない最小の横幅」か「デフォルト値・980px」 ではどうすべきか 全ブラウザで、統一した表示をしたければwidthを指定する。
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=360,initial-scale=1&amp;quot;&amp;gt; デバイスの画面サイズに応じてコンテンツの大きさを変えたい場合は、device-widthを指定する。
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; 参考 もう逃げない。HTMLのviewportをちゃんと理解する HTML：viewport の正しい書き方</description></item><item><title>Cookieのパラメータ整理</title><link>https://tech.choihack.com/post/others/cookie%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E6%95%B4%E7%90%86/</link><pubDate>Thu, 05 Aug 2021 10:54:47 +0900</pubDate><guid>https://tech.choihack.com/post/others/cookie%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E6%95%B4%E7%90%86/</guid><description>はじめに Cookieの設定をする時に、意外と色々パラメータがあります。
何度も調べては忘れるので、ここでわかりやすくまとめて調べるのは最後にしたいと思います。
パラメータの種類 GoogleChromeのDeveloperToolで調べると、以下のパラメータがあります。
Name Value Domain Path Expires/Max-Age Size HttpOnly Secure SameSite Sameparty Priority これらを対象にそれぞれのパラメータの意味と、設定される値について見ていきます。 Name/Value 早速説明を省きます。
Cookie名とCookieの値です。
Expires/Max-Age Cookieの有効期限です。
指定しない場合は、セッション終了までです。
Max-Ageの単位は秒です。
Domain どのホストの場合にCookieを送信するかを指定します。
デフォルトはCookieを保存したページのホストと同じページにアクセスした場合だけCookieを送信します。
例えば、example.com/page.htmlにアクセスした時に保存されたCookieは、同じくexample.com のホストのページにアクセスした場合に送信されます。
この時、サブドメインへアクセスしてもCookieは送信されません。
あえてDomainを指定し場合は、サブドメインを含めてCookieを送信できます。
Domainの設定は以下のように行います。
document.cookie = 'A=B; Domain=example.com'; Path PathはどのパスでCookieを送信するかを許可します。
Secure Httpsの通信でのみ使用できる。
document.cookie = 'A=B; Secure'; HttpOnly JavaScriptで生成されたCookieはこのフラグを含むことができない フラグを含む場合は、JavaScriptで取得もできない document.cookie = 'A=B; HttpOnly'; HttpとかHttpsとかに関連するCookieかと思うような名前ですが、Httpリクエスト経由でしか使用できないという意味のようですね。
SameSite 別サイトに遷移する時に、遷移先サイトのCookieを送信するかどうかを設定できます。
設定可能な値は、以下のStrict、Lax、Noneの3つです。
遷移元をAサイト、遷移先をBサイトとしましょう。
AサイトからBサイトへ遷移する時、BサイトのCookieが送信されるか設定によって以下のようになります。
Strict：BサイトのCookieを送信しない Lax：GETやHEADなど、安全なメソッドの場合だけ送信する None：制限なくBサイトのCookieを送信する Chromeでは、SameSiteが設定されていない場合は、Lax扱いになります。
また、Noneを指定する場合は、同時にSecrue属性が必須です。
つまり、制限なく別サイトにCookieを送信するには、HTTPS通信でないといけないということになります。
参考 Cookieで指定可能な属性の種類と設定方法</description></item><item><title>Google gcloudコマンド</title><link>https://tech.choihack.com/post/gcp/google-gcloud%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</link><pubDate>Tue, 03 Aug 2021 16:03:28 +0900</pubDate><guid>https://tech.choihack.com/post/gcp/google-gcloud%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</guid><description>はじめに GCPを使うにあたって、gcloudコマンドは必須です。
GCPのリソースを作成・管理するためのコマンドが含まれています。
この記事では、コマンドの使用方法の概要を整理します。
インストール 以下の手順でインストールできます。
インストール手順 インストールしなくてもCloudShellというGCPの画面直接gcloudコマンドが使用できます。
初期設定系のコマンド コマンド 説明 gcloud init gcloud ツールを初期化、承認、構成します。 gcloud version バージョンとインストールされているコンポーネントを表示します。 gcloud components install 特定のコンポーネントをインストールします。 gcloud components update Cloud SDK を最新バージョンに更新します。 gcloud config set project 作業するデフォルトの Google Cloud プロジェクトを設定します。 gcloud info 現在の gcloud ツール環境の詳細を表示します。 認証系 コマンド 説明 gcloud auth login Google ユーザー認証情報を使用して gcloud ツール用の Google Cloud アクセスを承認し、現在のアカウントをアクティブとして設定します。 gcloud auth activate-service-account gcloud auth login と同様ですが、サービス アカウントの認証情報を使用します。 gcloud auth list 認証情報が付与されているすべてのアカウントを一覧表示します。 gcloud auth print-access-token 現在のアカウントのアクセス トークンを表示します。 gcloud auth revoke アカウントのアクセス認証情報を削除します。 コンテナ系 コマンド 説明 gcloud auth configure-docker gcloud ツールを Docker 認証ヘルパーとして登録します。 gcloud container clusters create GKE コンテナを実行するためのクラスタを作成します。 gcloud container clusters list GKE コンテナを実行するためのクラスタを一覧表示します。 gcloud container clusters get-credentials kubeconfig を更新して、kubectl で GKE クラスタを使用するようにします。 gcloud container images list-tags コンテナ イメージのタグとダイジェスト メタデータを一覧表示します。 参照 gcloud コマンドライン ツールのクイック リファレンス 入門ガイド gcloud コマンドライン ツールの概要</description></item><item><title>Dockerコマンド</title><link>https://tech.choihack.com/post/others/docker%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</link><pubDate>Sun, 01 Aug 2021 17:17:17 +0900</pubDate><guid>https://tech.choihack.com/post/others/docker%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</guid><description>はじめに Dockerを扱う場合、様々なコマンドが登場します。
この投稿は、コマンドについて徒然とまとめる投稿です。
Docker基礎知識 Dockerの特徴と、よくある疑問をまとめます。
Infrastructure as Code Dockerはインフラの状態をコードとして管理できます。
Dockerfileはイメージの構成を定義します。
docker-compose.ymlはコンテナの構成を定義します。
テキストで構成を管理できるので、差分管理や共有が早く簡単になります。
DockerHubとは? Docker Hub はDocker社が管理するDockerイメージのレジストリ（保管場所）。 様々がDockerイメージが保存されており、ダウンロードして自分のコンテナ構成に組み込める。
Dockerのイメージとコンテナの違い DockerコンテナとはDockerイメージのインスタンスのこと。
イメージが設計図で、コンテナが実体。
Dockerのイメージとコンテナの違い VirtualBoxと何が違う？ Dockerは「コンテナ型仮想化」で、VirtualBoxは「ホスト型仮想化」。
ホスト型仮想化が、ゲストOSをシミュレートするため、リソースを多く消費する。
コンテナ型仮想化は、ホストOSから見ると単一プロセスで、ホストOSにカーネルを共有するため、消費リソースが少ない。
「Docker」を全く知らない人のために「Docker」の魅力を伝えるための「Docker」入門 DockerHubの操作 DockerHubにログイン docker login [OPTIONS] [SERVER] [flags] 例: docker login
イメージの検索 DockerHubからイメージを検索できる。
docker search [OPTIONS] TERM イメージのダウンロード docker pull [OPTIONS] NAME[:TAG|@DIGEST] イメージのアップロード docker push [OPTIONS] NAME[:TAG] ローカルのDockerイメージの操作 イメージ一覧 ローカルのイメージ一覧を表示
docker images [OPTIONS] [REPOSITORY[:TAG]] 実行中コンテナを一覧。
イメージ詳細情報表示 docker inspect [OPTIONS] NAME|ID [NAME|ID...] 例：docker inspect ruby:2.6.5</description></item><item><title>DockerでRubyOnRails環境を構築</title><link>https://tech.choihack.com/post/rubyonrails/docker%E3%81%A7rubyonrails%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89/</link><pubDate>Sun, 01 Aug 2021 15:49:59 +0900</pubDate><guid>https://tech.choihack.com/post/rubyonrails/docker%E3%81%A7rubyonrails%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89/</guid><description>はじめに RubyOnRailsの学習のために、すぐにクリーンな環境を作り直せるDockerで環境構築をしていきます。
DockerDesktopはインストール前提です。
ファイルを作成 新規でディレクトリを作成します。
そのディレクトリに、以下の構成になるようにファイルを作成していきます。
. ├── Dockerfile ├── Gemfile ├── Gemfile.lock ├── docker-compose.yml └── entrypoint.sh Dockerfile作成 Dockerfileという名前でファイルを作成し、以下を記述します。
FROM ruby:2.7.0 # yarnをインストール RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &amp;amp;&amp;amp; \ echo &amp;quot;deb https://dl.yarnpkg.com/debian/ stable main&amp;quot; | tee /etc/apt/sources.list.d/yarn.list # モジュールインストール RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y nodejs yarn # rails_appディレクトリを作成し、作業ディレクトリにする RUN mkdir /rails_app WORKDIR /rails_app # GemfileとGemfile.lockをコピーして、bundlerでインストールする COPY Gemfile /rails_app/Gemfile COPY Gemfile.lock /rails_app/Gemfile.lock RUN bundle install COPY .</description></item><item><title>WordPressのオリジナルテーマを作成</title><link>https://tech.choihack.com/post/wordpress/wordpress%E3%81%AE%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%8A%E3%83%AB%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92%E4%BD%9C%E6%88%90/</link><pubDate>Sun, 01 Aug 2021 15:08:32 +0900</pubDate><guid>https://tech.choihack.com/post/wordpress/wordpress%E3%81%AE%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%8A%E3%83%AB%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92%E4%BD%9C%E6%88%90/</guid><description>はじめに WordPressでオリジナルテーマ作成時に基本となる知識を整理しました。
テーマ階層 WordPressは以下のテンプレート階層に従って各種ページに対して適用されるテンプレートファイルを決定している。
ページにアクセスした場合、この図の左から順番に優先的に最適なテンプレートが選び出される。
index.phpは全てのページに適用される最も優先度が低いテンプレートファイルです。
テンプレート階層 テーマの最小構成 テーマを作成するのに必要な最低限のファイルは以下です。
index.php style.css WordPressで理解必須のループ ループとはWordPressの投稿を表示するために使用される処理です。
テンプレートタグ やプラグインの一部の説明で、このタグ（プラグイン）はループ内で使いますとある場合、そのタグはループの中で使う必要があります。
例として、the_title()（投稿のタイトルを取得する）は、ループ内でしか使用できません。
ループは以下のように書きます。
&amp;lt;?php if ( have_posts() ) { while ( have_posts() ) { the_post(); // // 投稿がここに表示される // } // end while } // end if ?&amp;gt; 参考 ループ</description></item><item><title>WordPressのMySQLを覗いてみる</title><link>https://tech.choihack.com/post/wordpress/wordpress%E3%81%AEmysql%E3%82%92%E8%A6%97%E3%81%84%E3%81%A6%E3%81%BF%E3%82%8B/</link><pubDate>Thu, 29 Jul 2021 19:08:24 +0900</pubDate><guid>https://tech.choihack.com/post/wordpress/wordpress%E3%81%AEmysql%E3%82%92%E8%A6%97%E3%81%84%E3%81%A6%E3%81%BF%E3%82%8B/</guid><description>はじめに 前回の Dockerを使ってwordpress環境を瞬作 という投稿で、WordPressを立ち上げました。
今回は立ち上げたことを前提として、MySQLファイルを覗いていきましょう。
MySQLにログインする まずは、MySQLのDockerコンテナ内に入ります。
docker exec -it mysql bash 入った後、MySQLにログインします。
mysql -u wp_user -ppassword -u: ユーザー名
-p: パスワード
データベースの一覧 $ show databases; +--------------------+ | Database | +--------------------+ | information_schema | | wordpress | +--------------------+ 2 rows in set (0.10 sec) wordpressという名前のデータベースがあることがわかります。
テーブル一覧 use wordpress; でデータベースを指定できます。
テーブル一覧を見てみましょう。
$ show tables; +-----------------------+ | Tables_in_wordpress | +-----------------------+ | wp_commentmeta | | wp_comments | | wp_links | | wp_options | | wp_postmeta | | wp_posts | | wp_term_relationships | | wp_term_taxonomy | | wp_termmeta | | wp_terms | | wp_usermeta | | wp_users | +-----------------------+ 12 rows in set (0.</description></item><item><title>Dockerを使ってWordPress環境を瞬作</title><link>https://tech.choihack.com/post/wordpress/docker%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6wordpress%E7%92%B0%E5%A2%83%E3%82%92%E7%9E%AC%E4%BD%9C/</link><pubDate>Thu, 29 Jul 2021 19:07:24 +0900</pubDate><guid>https://tech.choihack.com/post/wordpress/docker%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6wordpress%E7%92%B0%E5%A2%83%E3%82%92%E7%9E%AC%E4%BD%9C/</guid><description>はじめに 色んな技術を勉強する時に、一番厄介なのが環境構築です。
失敗しても捨ててすぐに作りなおせるような環境があれば、勉強が捗りますよね？
そこでdockerを使ってWordPress環境を構築できるようにしました。
docker-composeで一瞬で環境構築 version: '3' services: wp: container_name: wordpress # 名前を付ける image: wordpress:5.4-php7.4-apache # 基となるdockerイメージを設定 ports: # docker内の80ポートを8080ポートとして使用 - 8080:80 depends_on: # dbを待ってから立ち上げる - db environment: # 環境変数を設定する WORDPRESS_DB_HOST: mysql:3306 # mysqlサーバーの3306ポートを指定 WORDPRESS_DB_PASSWORD: password # データベースのパスワード WORDPRESS_DB_NAME: wordpress # データベースの名前 WORDPRESS_DB_USER: wp_user # データベースのユーザー名 volumes: # ホストPCにボリュームをマウントする - ./apache/log:/var/log/apache2 - ./public:/var/www/html db: container_name: mysql image: mysql:5.7 environment: # WordPressの方で指定した設定と同じにしておく必要がある MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: wordpress MYSQL_USER: wp_user MYSQL_PASSWORD: password volumes: - .</description></item><item><title>WordPressのファイル構成を理解する</title><link>https://tech.choihack.com/post/wordpress/wordpress%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B/</link><pubDate>Thu, 29 Jul 2021 19:07:24 +0900</pubDate><guid>https://tech.choihack.com/post/wordpress/wordpress%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B/</guid><description>はじめに 前回の Dockerを使ってwordpress環境を瞬作 という投稿で、WordPressを立ち上げました。
今回はファイル構成の詳細を見ていきましょう。
ファイル構成 . ├── wp-admin # 管理画面に関するファイル ├── wp-content │ ├── languages │ ├── plugins # プラグインが格納されるディレクトリ │ ├── themes # テーマが格納されるディレクトリ │ └── upgrade └── wp-includes ├── index.php # WordPressが初めに通るファイル ├── wp-config.php # WordPressの設定が書かれているファイル ├── wp-config-sample.php # wp-config.phpの雛形ファイル ├── wp-login.php # ログイン画面のファイル ├── license.txt # ライセンスに関するファイル ├── readme.html # WordPressの概要に関するファイル └── .htaccess # Apacheの設定ファイル</description></item><item><title>Seriesとは</title><link>https://tech.choihack.com/post/tradingview/series%E3%81%A8%E3%81%AF/</link><pubDate>Mon, 26 Jul 2021 18:26:57 +0900</pubDate><guid>https://tech.choihack.com/post/tradingview/series%E3%81%A8%E3%81%AF/</guid><description>はじめに PineScriptを使用する上で、最も重要なのがSeriesの理解です。
Seriesは若干クセがあるので、しっかりと理解する必要があります。
Pineスクリプトの型システム Pineスクリプトには以下の基本的な9つの型が存在します。
int float bool color string line label plot hline これらの型はいくつかの形式で存在します。
形式には5種類あります。
literal const input simple series 型と形式は合わせて参照されます。
例えばliteral bool型、input bool型&amp;hellip;のようにコンパイラによって識別されます。
また、以下のような型も存在します。
array void na (not available) tuple type 形式 Literal Literalは固定された値を表すための特別な表記法です。
Literalは常に以下のどれかの型形式になります。
literal float (3.14, 6.02E-23, 3e8) literal int (42) literal bool (true, false) literal string (&amp;ldquo;A text literal&amp;rdquo;) literal color (#FF55C6) ビルトインのopen,high,low,&amp;hellip;などはLiterarlではありません。
これらはserires formです。
Const Const形式の値は次の特徴があります。</description></item><item><title>ボックス描画機能</title><link>https://tech.choihack.com/post/tradingview/%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E6%8F%8F%E7%94%BB%E6%A9%9F%E8%83%BD/</link><pubDate>Mon, 26 Jul 2021 17:54:26 +0900</pubDate><guid>https://tech.choihack.com/post/tradingview/%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E6%8F%8F%E7%94%BB%E6%A9%9F%E8%83%BD/</guid><description>はじめに PineScriptにボックス描画機能が追加されました。
この機能ではチャート上に長方形を簡単に書くことができます。 サンプルを踏まえて、PineScriptでの使い方を見ていきます。
サンプル //@version=4 study(&amp;quot;Box Example&amp;quot;, overlay=true) c_green = color.rgb(33, 150, 243, 80) ll = lowest(10) hh = highest(10) b1 = box(na) if barstate.islast b1 := box.new(bar_index[9], hh, bar_index, ll, bgcolor=c_green, border_style=line.style_dashed) box.delete(b1[1]) //@version=4
バージョン4のPineScriptを使用しています。 study(&amp;quot;Box Example&amp;quot;, overlay=true)
Box Exampleという名前でインジケータを作成します。
overlay=trueでチャートを重ねて表示します。 c_green = color.rgb(33, 150, 243, 80)
color.rgb(red, green, blue, transp)の文法で色を定義します。
各色は0~255,transpは0(不透明)~100(不可視)です。 ll = lowest(10)
lowestは指定された過去バーの範囲での最安値を意味します。 この場合は過去10本のバーの中での最安値のことです。 hh = highest(10)
lowestと逆で過去10本のバーの中で最高値を意味します。 b1 = box(na)
ifが別のスコープを作成するので、再代入する元になるb1変数を先に空で定義しておきます。 if barstate.islast barstate.</description></item><item><title>PineScript入門</title><link>https://tech.choihack.com/post/tradingview/pinescript%E5%85%A5%E9%96%80/</link><pubDate>Mon, 26 Jul 2021 17:13:59 +0900</pubDate><guid>https://tech.choihack.com/post/tradingview/pinescript%E5%85%A5%E9%96%80/</guid><description>はじめに PineScriptはトレードのインジケータを作成するための言語です。
独自の言語なので少し癖があります。
この記事では、 Quickstart guide で紹介されているインジケータを解説します。
対象のインジケータのコード //@version=4 study(&amp;quot;MACD&amp;quot;) fast = 12, slow = 26 fastMA = ema(close, fast) slowMA = ema(close, slow) macd = fastMA - slowMA signal = sma(macd, 9) plot(macd, color=color.blue) plot(signal, color=color.orange) Line 1: //@version=4
この行はコンパイラにスクリプトのバージョンを伝えるコメントです。 Line 2: study(&amp;quot;MACD&amp;quot;)
MACDというチャートの名前を定義しています。
studyはインジケータ、strategyがEAを意味します。 Line 3: fast = 12, slow = 26
2つの変数を定義しています。 Line 4: fastMA = ema(close, fast)
EMA(Exponential Moving Average)を計算した結果をfastMAに代入します。
ema はビルトイン関数です。
closeのシリーズを元に計算し、期間はfast（12）です。 Line 5: slowMA = ema(close, slow)</description></item><item><title>GitHubPagesとGoogleDomainでサイトを公開する</title><link>https://tech.choihack.com/post/hugo/githubpages%E3%81%A8googledomain%E3%81%A7%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</link><pubDate>Sun, 25 Jul 2021 09:32:14 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/githubpages%E3%81%A8googledomain%E3%81%A7%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</guid><description>はじめに GitHubPagesの利点は、いくつか制限があるものの以下のメリットがあります。
TLS対応（Let&amp;rsquo;s Encrypt) 独自ドメイン対応 無料 GoogleDomainでは１４００円のドメインを使用しています。
このドメインにサブドメインを追加することで、複数ドメインを追加料金なく使用しています。
なので、私はいくつかブログを運用していますが、年間合計１４００円しかかかっていません。
しかも、GitHubのActionsなど優秀な機能の恩恵を請けられるので、メンテナンスコストが非常に少なくなります。
GoogleDomainでドメイン取得 サブドメインを追加する方法を説明します。
GoogleDomainの管理画面から マイドメイン &amp;gt; 自分のドメイン &amp;gt; DNS &amp;gt; カスタムレコードを管理
すると、ドメインの設定をカスタマイズできるようになります。
新しいレコードを追加 し、以下のように入力します。
ホスト名： サブドメインにしたい文字列（別名とするサブドメインの指定） タイプ： CNAME（データで指定したホストに対して、別名を登録する方式） TTL：3600（1時間の有効期限） データ：XXXXXXX.github.io. （自身のGitHubのホスト） GitHubActionsを使ってHugoをビルドする ActionsのWorkflowに以下を登録します。
name: gh-pages on: push: branches: - master workflow_dispatch: jobs: build: runs-on: ubuntu-20.04 steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.85.0' extended: true - name: Hugo build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.</description></item><item><title>ShortcodeでAmazonのリンクを作成する</title><link>https://tech.choihack.com/post/hugo/shortcode/</link><pubDate>Sun, 25 Jul 2021 09:16:54 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/shortcode/</guid><description>はじめに Hugoでブログを書いていて、頻出するようなHTMLを自動で簡単に出力できるようにしたいと思いました。
そこで使用できるのがShortcodeの機能です。
今回はAmazonのアフィリエイトリンクを作成するためのShortcodeを作成します。
Shortcodeの基本 Shortcodeは、事前に定義した小さな処理を呼び出すための仕組みです。
ここでは書き方を整理します。
/layouts/shortcodes/以下にSHORTCODE.htmlをファイルを作成すると
SHORTCODEがショートコード名になる Shortcodeを呼び出す場合は
{{&amp;lt; ショートコード名 &amp;quot;値&amp;quot; &amp;gt;}}
{{&amp;lt; ショートコード名 パラメータ名=&amp;quot;値&amp;quot; &amp;gt;}} パラメータを取り出す場合は
{{ .Get 0 }}（0はパラメータのインデックス）
{{ .Get パラメータ名 }} 間に文字を挟み込める
{{&amp;lt; highlight go &amp;gt;}} A bunch of code here {{&amp;lt; /highlight &amp;gt;}} 挟み込んだ文字を取り出す場合は
{{ .Inner }} 挟み込んだ文字は書き方によって処理のされ方が異なる
{{&amp;lt; &amp;gt;}} -&amp;gt; HTML
{{% %}} -&amp;gt; Markdown Built-inショートコードが存在する。 Figure Youtube Tweet Instagram etc. ShortcodeのサンプルをMarkdownで表示したい場合は
{{&amp;lt;/* shortcode */&amp;gt;}} Amazonのショートコードを作成 サンプルにAmazonのアフィリエイトリンク用のショートコードを作成します。</description></item><item><title>Git submoduleを理解する</title><link>https://tech.choihack.com/post/others/git_submodule%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B/</link><pubDate>Tue, 20 Jul 2021 07:32:10 +0900</pubDate><guid>https://tech.choihack.com/post/others/git_submodule%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B/</guid><description>はじめに Git submoduleとは外部のGitリポジトリを、自分のリポジトリのサブディレクトリとして登録する仕組みです。
コマンドの使い方 頻出するコマンドをまとめます。
今回はサンプルとして、MainroadというHugoのテーマを使います。
ローカルワークスペースのthemes/mainroadディレクトリ以下に追加していきます。
追加 git submodule add &amp;lt;リポジトリのURL&amp;gt; &amp;lt;ローカルのサブディレクトリ&amp;gt;
git submodule add https://github.com/Vimux/Mainroad.git themes/mainroad themes/mainroad以下にmainroadがクローンされます。
更新 git submodule update
削除 git submodule deinit -f &amp;lt;サブモジュール&amp;gt;: submoduleを削除
git rm -f &amp;lt;サブモジュール&amp;gt;: gitの管理から削除
rm -rf .git/modules/&amp;lt;サブモジュール&amp;gt;: .gitからgit情報を削除
git submodule deinit themes/mainroad git rm -f themes/mainroad rm -rf .git/modules/themes/mainroad submoduleを追加したときに起こっていること submoduleを理解するために、どんなことが起こっているのかを整理しておきましょう。
追加されたファイルを確認 $ git status On branch master Changes to be committed: (use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage) new file: .</description></item><item><title>GASでLINEBotを作成する方法</title><link>https://tech.choihack.com/post/gas/gas%E3%81%A7linebot%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 19 Jul 2021 08:45:56 +0900</pubDate><guid>https://tech.choihack.com/post/gas/gas%E3%81%A7linebot%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid><description>はじめに いい家計簿アプリが見つからなかったので、GASを使って家計簿アプリを作成してみました。
この記事では全ての手順は解説せず、注意点だけを備忘録的に記載します。
LINEの設定 LINE Developersアカウントを作成 以下からアカウントを作成する。
https://developers.line.biz/ja/
プロバイダー作成 LINE Developersの画面から、プロバイダーを作成する。
プロバイダーとはサービスを提供する組織や個人のこと。
Webhookの利用を有効化 Webhookの利用が初期状態では無効なので有効化する。
GASのウェブアプリがデプロイ済みであれば、URLも設定して検証を行う。
グループ・複数人チャットへの参加を許可する PUSH_MESSAGEのAPIを利用する場合、そのLINEグループのGroupIDが必要となる。
LINEグループへBotを追加するには、Botが承認を有効にする必要があるので、「グループ・複数人チャットへの参加を許可する」を有効にしておく。
GASの設定 ログの設定 LINE Botを作成するに当たり、GASのdoPost関数を利用します。
しかし、doPostはログを確認できません。
正確に言うと、エディタから実行した場合はログが見れますが、外部から実行された場合そのログは確認できません。
外部から実行された場合でもログを確認するためには、Google Cloud Platform (GCP) と紐付ける必要があります。
裏技的に、スプレッドシートをログ代わりにすることも可能です。</description></item><item><title>ページ・セクション・カテゴリ数の取得</title><link>https://tech.choihack.com/post/hugo/%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA%E6%95%B0%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 18 Jul 2021 16:34:14 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA%E6%95%B0%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description>はじめに Hugoでページのデータを取得する方法をまとめました。
取得方法 サイト内の全記事数 {{ len .Site.RegularPages }} サイト内の全ページ数 {{ len .Site.Pages }} ホームページから下層のページ、そして、カテゴリやタグページも含まれる。
現在の階層の記事数 {{ len .RegularPages }} 現在の階層のページ数 {{ len .Pages }} ページにはセクションページも含まれる。
現在の階層以下の全ての記事数 {{ len .RegularPagesRecursive }} ただし、listページでのみ使用できる。
現在の階層のセクション数を取得 {{ len .Sections }} サイト内の全カテゴリ数 {{ len .Site.Taxonomies.categories }} サイト内の全タグ数 {{ len .Site.Taxonomies.tags }}</description></item><item><title>Hugoでテーマ作成する前に抑えて置きたいこと</title><link>https://tech.choihack.com/post/hugo/hugo%E3%81%A7%E3%83%86%E3%83%BC%E3%83%9E%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB%E6%8A%91%E3%81%88%E3%81%A6%E7%BD%AE%E3%81%8D%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8/</link><pubDate>Wed, 14 Jul 2021 00:04:43 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/hugo%E3%81%A7%E3%83%86%E3%83%BC%E3%83%9E%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB%E6%8A%91%E3%81%88%E3%81%A6%E7%BD%AE%E3%81%8D%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8/</guid><description>はじめに 私はHugoでテーマを作成していますが、よく探さないと記載されていなかったり、あやふやなまま使っていた書き方がありました。
そこでそれらをまとめてみました。
Hugoのテンプレートのハイフンの有無 以下のように、{{}}内に-を書いていたり、いなかったりするテーマを見かけます。
&amp;lt;div&amp;gt; {{- .Title -}} &amp;lt;/div&amp;gt; この出力結果は以下です。
&amp;lt;div&amp;gt;Hello, World!&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; {{ .Title }} &amp;lt;/div&amp;gt; このようにハイフンがない場合は以下のようになります。
&amp;lt;div&amp;gt; Hello, World! &amp;lt;/div&amp;gt; なので、前後のwhitespaceが消えます。
Whitespace 参考 Introduction to Hugo Templating</description></item><item><title>404ページを作成する</title><link>https://tech.choihack.com/post/hugo/404%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</link><pubDate>Tue, 13 Jul 2021 23:51:01 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/404%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</guid><description>はじめに 404ステータスとは、ページが見つからない場合に返すステータスのことです。
Hugoでは存在しないページ用のHTMLも独自定義できます。
作成方法 /layouts/404.htmlにページを作成します。
{{ define &amp;quot;main&amp;quot;}} &amp;lt;main id=&amp;quot;main&amp;quot;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{{ &amp;quot;/&amp;quot; | relURL }}&amp;quot;&amp;gt;Go Home&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/main&amp;gt; {{ end }} 動作確認 http://localhost:1313/404.html にアクセスして確認します。
ローカルでの確認の注意点として、ローカルは上記のリンクを直接開く必要があります。
GitHubPagesなどのサービスを利用している場合は、存在しないURLにアクセスされた場合は、404.htmlにリダイレクトしてくれます。
参考 Custom 404 Page</description></item><item><title>ページ変数</title><link>https://tech.choihack.com/post/hugo/%E3%83%9A%E3%83%BC%E3%82%B8%E5%A4%89%E6%95%B0/</link><pubDate>Sun, 11 Jul 2021 18:32:36 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/%E3%83%9A%E3%83%BC%E3%82%B8%E5%A4%89%E6%95%B0/</guid><description>はじめに ページ毎の変数は、 フロントマター で定義されるか、コンテンツのファイルの場所から生成されるか、コンテンツ本体から生成されます。
この記事では、ページレベル変数のリストの一部をまとめました。
ページ変数 多くの変数は、 フロントマター で定義されている変数です。
その中の一部を説明します。
.Kind: page、home、section、taxonomy、term、RSS、sitemap、robotsTXT、404などページの種類 .LinkTitle: ページのリンクを設定。設定されていれば、titleより優先的に使用される .Next: 次のregular page .Prev: 前のregular page .Site: Site Variables .Type: Content Types タイプが未設定ならcontent/&amp;lt;TYPE&amp;gt;のフォルダ名がタイプになる .Pages変数 regular pageはpostページかcontentページです。
一方、list pageはregular pageか他のlist pageを一覧化します。
（例: homepage、section page、taxonomy term page、taxonomypage）
記事をツリー状にした場合、末端がregular page、幹がlist pageです。
.Site.Pages: サイト内の全ページ。セクションやtaxonomyページも含む .Site.RegularPages: サイト内の全通常ページ 以下の変数は、現在のスコープだけを返します。
.Pages: 現在のページのスコープのregular pageとセクションページ。.Data.Pagesのエイリアスです。(第一階層のみ) .RegularPages: 現在のページのスコープのregular page。入れ子になっているものは除く .RegularPagesRecursive: 現在のページ以下の全てのregular page。入れ子になっているものを含む regular pageから.Pagesや.RegularPagesを使用しても、空が返ります。
セクション変数と関数 .Parent: ページのセクションや、セクションの親セクション .Section: 現在の記事が属するセクション .</description></item><item><title>フロントマター</title><link>https://tech.choihack.com/post/hugo/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%83%9E%E3%82%BF%E3%83%BC/</link><pubDate>Sun, 11 Jul 2021 17:06:18 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%83%9E%E3%82%BF%E3%83%BC/</guid><description>はじめに Hugoで記事を書く際に、各投稿の先頭に投稿の情報を記載できます。
この情報のことをフロントマター（FrontMatter）と言います。
フォーマット フロントマターはどんな記号で囲まれているかで、フォーマットの指定ができます。
TOML: +++ YAML: --- JSON: {} 中身はkeyvalueのペアで指定できます。
TOMLの場合はdate = &amp;quot;2021-07-11&amp;quot;のように=で繋ぎます。
定義済み変数 フロントマターには定義済み変数と独自定義変数が存在します。
定義済み変数の一部は以下のようになっています。
date: 投稿日付 description: コンテンツの説明 draft: trueなら下書き段階 images: 対象のページに関連する画像のパス配列。_internal/twitter_cards.htmlなどで使用される keywords: メタキーワード lastmod: 最終更新日付 linkTitle: コンテンツのリンク生成時に使用されるURL。Hugoはtitleの前にlinkTitleを使用する series: ページが属するシリーズ名 slug: 出力URLの末尾に表示される weight: 順番を並べ替える際に、小さいほど優先される 独自定義変数 include_toc = true このように定義した場合、.Params.include_tocで使用できます。
参考 Front Matter</description></item><item><title>Markdownでclass属性やid属性を付ける</title><link>https://tech.choihack.com/post/hugo/markdown%E3%81%A7class%E5%B1%9E%E6%80%A7%E3%82%84id%E5%B1%9E%E6%80%A7%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B/</link><pubDate>Sun, 11 Jul 2021 14:01:14 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/markdown%E3%81%A7class%E5%B1%9E%E6%80%A7%E3%82%84id%E5%B1%9E%E6%80%A7%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B/</guid><description>はじめに 通常Markdownで記載していると、独自のclass属性やid属性が指定できません。
ただし、だからと言って直接HTMLを記載するとMarkdownで書くというメリットが失われます。
Markdownで書きつつ、class属性やid属性を付ける方法を説明します。
markup.goldmark.parser.attribute 装飾したいMarkdown要素の後に{}で囲んだ属性リストを追加することで、独自の属性を追加できます。
この機能を使用するためにはconfig.tomlに以下の設定が必要です。
[markup.goldmark.parser.attribute] block = true ただし、この機能はv0.81.0からHugoに追加された機能です。
例えば以下のMarkdownを変換してみます。
この文章は警告です。 { .warn } &amp;lt;p class=&amp;quot;warn&amp;quot;&amp;gt;この文章は警告です。&amp;lt;/p&amp;gt; 参考 Configure Markup</description></item><item><title>config.tomlファイルの使い方</title><link>https://tech.choihack.com/post/hugo/config.toml%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</link><pubDate>Sun, 11 Jul 2021 12:45:54 +0900</pubDate><guid>https://tech.choihack.com/post/hugo/config.toml%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</guid><description>コンフィグファイルの種類 Hugoではいくつかのコンフィグファイルの種類が定義でき、好きな形式で書くことができます。
config.toml config.yaml config.json ここでは、TOML形式で定義したコンフィグファイルの説明を行います。
config.tomlファイルの読み方 TOMLとJSONファイルを変換できるサイトがあるので、一度確認すると意味がわかりやすいです。
TOML 参考にTOMLをJSONに変換したものを載せます。
TOML
title = &amp;quot;TOML Example&amp;quot; [test] a = 1 [[table]] b = 2 [[table]] c = 3 [table3.inner] d = 4 [[table2.description]] e = 5 JSON
{ &amp;quot;title&amp;quot;: &amp;quot;TOML Example&amp;quot;, &amp;quot;test&amp;quot;: { &amp;quot;a&amp;quot;: 1 }, &amp;quot;table&amp;quot;: [ { &amp;quot;b&amp;quot;: 2 }, { &amp;quot;c&amp;quot;: 3 } ], &amp;quot;table3&amp;quot;: { &amp;quot;inner&amp;quot;: { &amp;quot;d&amp;quot;: 4 } }, &amp;quot;table2&amp;quot;: { &amp;quot;description&amp;quot;: [ { &amp;quot;e&amp;quot;: 5 } ] } } TOMLで[[&amp;lt;PARAM_NAME&amp;gt;]]のように2重の括弧で囲むと、配列として定義されることがわかります。</description></item><item><title>サイト作成</title><link>https://tech.choihack.com/post/hugo/%E3%82%B5%E3%82%A4%E3%83%88%E4%BD%9C%E6%88%90/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>https://tech.choihack.com/post/hugo/%E3%82%B5%E3%82%A4%E3%83%88%E4%BD%9C%E6%88%90/</guid><description>Hugoとは Hugoは静的サイトジェネレーターと呼ばれ、Markdown形式のコンテンツからHTMLを作成してくれます。
HugoはGoogle製のGo言語で作成されており、サイト作成の速度が非常に高速です。
この記事では、MacOSでの環境構築について説明します。
ローカルでサイト作成 Hugoインストール Homebrewを使用すると簡単にインストールできます。
$ brew install hugo 無事インストールが完了していると、以下のコマンドでバージョンが表示されるはずです。
$ hugo version Hugo Static Site Generator v0.79.0/extended darwin/amd64 BuildDate: unknown 新しいサイトの作成 $ hugo new site new_site_name このコマンドを実行することで、new_site_nameというフォルダー名で新しいサイトが作成できます。
テーマの追加 Hugoはテーマという仕組みで、簡単にサイトのデザインを使用できます。
テーマファイルは、themes/theme_nameディレクトリに保存されます。
git init(gitの初期化)を実行した後に以下を実行します。
git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke submodule addはgitのリポジトリ内に、子供のリポジトリを追加するコマンドです。
https://github.com/theNewDynamic/gohugo-theme-ananke.gitで定義されているHugoのテーマファイルを、ローカルのthemes/anankeディレクトリに保存しています。
submoduleとして追加しなくても、ダウンロードしてきたテーマファイルを配置しても構いません。
完了した後theme = &amp;quot;ananke&amp;quot;のようにconfig.tomlファイルに追加することでテーマを使用できます。
投稿の追加 投稿はcontent/&amp;lt;CATEGORY&amp;gt;/&amp;lt;FILE&amp;gt;.&amp;lt;FORMAT&amp;gt;という形式で保存します。
hugo new post/first-post.md と実行すると、content/post/first-post.mdに投稿んぼ雛形が追加されます。
--- title: &amp;quot;My First Post&amp;quot; date: 2019-03-26T08:47:11+01:00 draft: true --- 中にはこのような情報が記載されており、記事の詳細情報を定義することができます。
Hugoを起動する hugo server -D このコマンドで起動できます。
通常 http://localhost:1313/ にアクセスすると立ち上げたサーバーにアクセスできます。</description></item></channel></rss>